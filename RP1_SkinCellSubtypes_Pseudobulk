# PSEUDOBULK OF SKIN CELL SUBTYPES

import scanpy as sc
import pandas as pd
import re
import os

# Use the pre-normalized data 
adata = sc.read_h5ad('/mnt/bmh01-rds/Eckersley_Lab/MatissOzols/skin_scrna_results/handover/merged_h5ad/5.adata-normalized_pca-counts.h5ad')

# Set unique ID per sample
adata.obs['adata_phenotype_id'] = adata.obs['experiment_id'].astype('str') + '_' + adata.obs['donor_id'].astype('str')

# Parameters
method = 'dMean'
agg_columns = ['Celltypist:Fetal_Human_Skin:majority_voting']
cell_percentage_threshold = 0
n_individ = 1
n_cells = 4
gt_id_column = 'adata_phenotype_id'

# Output directory
output_dir = '/mnt/bmh01-rds/Eckersley_Lab/NiallGarvey/'
os.makedirs(output_dir, exist_ok=True)

# Data is already normalized â€” use log1p_cp10k layer
if method == 'dMean':
    if 'log1p_cp10k' in adata.layers:
        adata = adata.to_memory()
        adata.X = adata.layers['log1p_cp10k']
        print("adata.X has been updated with 'log1p_cp10k'.")
    else:
        print('Layer "log1p_cp10k" not found, assuming already normalized.')

# Process cell subtypes
for agg_col in agg_columns:
    print(agg_col)
    print("----------")

    try:
        data_col = adata.obs[agg_col]
    except:
        print(f'Aggregation column {agg_col} doesn\'t exist in adata')
        continue

    for type in data_col.unique():
        genotype_phenotype_mapping = []
        aggregated_data = pd.DataFrame()
        print(type)
        print("----------")

        modified_agg_col = re.sub(r'[^a-zA-Z0-9]', '_', type)
        adata.strings_to_categoricals()

        cell_adata = adata[adata.obs[agg_col] == type]
        cell_index = set(cell_adata.obs.index)

        if cell_percentage_threshold > 0:
            cell_counts = (cell_adata.X > 0).sum(axis=0).A1
            total_cells = cell_adata.shape[0]
            cell_expression_proportion = cell_counts / total_cells
            keep_genes = cell_expression_proportion >= cell_percentage_threshold
            indexes = cell_adata.var.index[keep_genes].tolist()
        else:
            indexes = list(cell_adata.var.index)

        if len(cell_adata.obs[gt_id_column].unique()) >= n_individ:
            aggregated_data_pre = pd.DataFrame()
            genotype_phenotype_mapping_pre = []
            for individual_1 in cell_adata.obs[gt_id_column].unique():
                donot_index = set(adata[adata.obs[gt_id_column] == individual_1].obs.index)
                cell_donor_index = set(cell_index.intersection(donot_index))
                individual_1_adata = adata[list(cell_donor_index), indexes]

                if individual_1_adata.obs.shape[0] >= n_cells:
                    Genotype = individual_1_adata.obs[gt_id_column].unique()[0]
                    f = individual_1_adata.to_df()
                    if method == 'dMean':
                        data_aggregated = pd.DataFrame(f.mean(axis=0))
                    elif method == 'dSum':
                        data_aggregated = pd.DataFrame(f.sum(axis=0))
                    else:
                        raise ValueError("Wrong method specified, use dMean or dSum")

                    type2 = f"{agg_col}-{type}-{method}".replace(' ', '_')
                    Phenotype = f"{type2}_{individual_1}".replace(' ', '_')
                    data_aggregated.set_index(f.columns, inplace=True)
                    data_aggregated.rename(columns={0: Phenotype}, inplace=True)

                    aggregated_data_pre = pd.concat([aggregated_data_pre, data_aggregated], axis=1)
                    genotype_phenotype_mapping_pre.append({'Genotype': Genotype, 'RNA': Phenotype, 'Sample_Category': type2})

            if len(aggregated_data_pre.columns) >= n_individ:
                aggregated_data = pd.concat([aggregated_data, aggregated_data_pre], axis=1)
                genotype_phenotype_mapping = genotype_phenotype_mapping + genotype_phenotype_mapping_pre

        genotype_phenotype_mapping = pd.DataFrame(genotype_phenotype_mapping)

        if len(genotype_phenotype_mapping) >= 1:
            mapping_outfile = os.path.join(output_dir, f'{method}__{modified_agg_col}___genotype_phenotype_mapping.tsv')
            data_outfile = os.path.join(output_dir, f'{method}__{modified_agg_col}___phenotype_file.tsv')

            genotype_phenotype_mapping.to_csv(mapping_outfile, sep='\t', index=False)
            aggregated_data.to_csv(data_outfile, sep='\t', index=True)

            print("\nSaved files:")
            print(mapping_outfile)
            print(data_outfile)
            print("\nPreview of mapping:")
            print(genotype_phenotype_mapping.head())
            print("\nPreview of aggregated data:")
            print(aggregated_data.head())

print('Successfully Finished')
